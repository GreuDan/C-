//2. Folosind modelul claselor de la mostenirea publica, implementaţi două clase, astfel:
//-clasa de bază contine metode pentru :
//-codarea unui şir de caractere(printr - un algoritm oarecare)
//= > public;
//-afişarea şirului original şi a celui rezultat din transformare
//= > public;
//-clasa derivata contine o metoda pentru :
//-scrirea rezultatului codării într - un fişier, la sfârşitul acestuia.
//Fiecare inregistrare are forma : nr_inregistrare: şir_codat;
//Accesul la metodele ambelor clase se face prin intermediul unui obiect rezultat prin
//instanţierea clasei derivate.Programul care foloseşte clasele citeşte un şir de caractere de la
//tastatură şi apoi, în funcţie de opţiunea utilizatorului, afişează rezultatul codării sau îl scrie în
//fişier.
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include <stdarg.h> 
using namespace std;
#include <fstream>     /* va_list, va_start, va_arg, va_end */
class ambient {
	char* s;
public:
	void setSir(const char*);
	char* codare_sir();
	void afisare();
};
void ambient::setSir(const char* a) {
	s = new char[strlen(a)];
	strcpy(s, a);
}
char* ambient::codare_sir() {
	for (int i = 0; i < strlen(s); i++) {
		if (s[i] >= 'a' && s[i] <= 'z') s[i] = s[i] - 32;
	}
	return s;
}
void ambient::afisare() {
	cout << "sirul modificat este: " << s;
}
class derivata:public ambient {
public:
	static int nr;
	void implementare();
};
void derivata::implementare() {
	nr++;
	ofstream fin("text1.txt");
	fin << nr << ":" << codare_sir();
	fin.close();
}
int derivata::nr = 0;
int main()
{
	cout << "Introduceti sirul:" << endl;
	ambient o1;
	derivata o2;
	char p[100];
	gets_s(p);
	o2.setSir(p);
	o2.codare_sir();
	char c;
	cout << "afisati sirul sau il introduceti in fisier? Y/N"<<endl;
	cin >> c;
	if (c == 'y' || c == 'Y') {
		o2.afisare();
	}
	else {
		o2.implementare();
	}
	cout << "mai introduceti un sir? Y/N"<<endl;
	cin >> c;
	if (c == 'y' || c == 'Y') {
		main();
	}
	else {
		return 0;
	}
}