//8. Să se implementeze clasa Complex care supraîncarcă operatorii aritmetici cu scopul de a efectua adunări,
//scăderi, inmulţiri şi împărţiri de numere complexe(folosind metode membre(+, -) și funcții friend (*, / )).
//Observaţie: numerele complexe vor fi definite ca având o parte reală şi una imaginară, ambii coeficienţi fiind
//reprezentați prin numere reale.
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string.h>
#include<stdio.h>
#include<stdlib.h>
using namespace std;
class Complex{
	float x;
	float y;
public:
	Complex() {
		x = 0;
		y = 0;
	}
	Complex(float n, float n1);
	Complex operator+(Complex&);
	Complex operator-(Complex&);
	friend Complex operator*=(Complex&,Complex&);
	friend Complex operator/=(Complex&,Complex&);
	void afisare();
};
Complex::Complex(float n, float n1) {
	x = n;
	y = n1;
}
Complex Complex::operator+(Complex& a) {
	Complex c;
	c.x += a.x;
	c.y += a.y;
	return c;
}
 Complex Complex::operator-(Complex& a) {
	Complex c;
	c.x -= a.x;
	c.y -= a.y;
	return c;
}
Complex operator*=(Complex& a, Complex& b) {
	Complex c;
	c.x = a.x * b.y;
	c.y = a.y * b.y;
	return c;
}
Complex operator/=(Complex& a, Complex& b) {
	Complex c;
	c.x = a.x*1.0 / b.y;
	c.y = a.y *1.0/ b.y;
	return c;
}
void Complex::afisare() {
	cout << x << "    " << y << endl;
}
int main() {
	Complex a(3.5, 5.0), b(5.0, 6.0),e(5,7);
	a.operator+(b);
	a.afisare();
	a.operator-(e);
	Complex c = operator*=(a, b);
	Complex d = operator/=(a, b);
	a.afisare();
	c.afisare();
	d.afisare();
}