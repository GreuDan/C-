//4. Să se supraîncarce operatorii new şi delete într-una din clasele cu care s-a lucrat anterior, în vederea alocarii şi
//eliberarii de memorie pentru un obiect din clasa respectivă.
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string.h>
#include<stdio.h>
using namespace std;
class Departament;
class Angajat {
	char* nume;
	float salariu;
public:
	friend class Departament;
};
class Departament {
	Angajat* s;
public:
	Departament();
	void afisare(int);
	void citire();
	~Departament() {
		delete(s);
	}
};
Departament::Departament() {
	s = new Angajat[5];
}
void Departament :: afisare(int i) {
	cout << "Nume angajat:  "<<s[i].nume<<endl;
	cout << "salariu:  " << s[i].salariu<<endl;
}
void Departament::citire() {
	s[0].nume = new char[strlen("aasdas") + 1];
	strcpy(s[0].nume, "aasdas");
	s[1].nume = new char[strlen("dqweffw") + 1];
	strcpy(s[1].nume, "dqweffw");
	s[2].nume = new char[strlen("dqwedfewffw") + 1];
	strcpy(s[2].nume, "dqwefdscffw");
	s[3].nume = new char[strlen("12312dqweffw") + 1];
	strcpy(s[3].nume, "132dqweffw");
	s[4].nume = new char[strlen("ffw") + 1];
	strcpy(s[4].nume, "ffw");
	for (int i = 0; i < 5; i++) {
		s[i].salariu = 100+0.6*i;
	}
}
int main() {
	Departament p;
	p.citire();
	p.afisare(2);
	p.~Departament();
}
