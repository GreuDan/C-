//1. Implementaţi programul prezentat în exemplul 3 şi examinaţi eventualele erori date la
//compilare daca exista prin eliminarea comentariilor.Modificaţi programul astfel încât să se
//poată accesa din funcţia main(), prin intermediul obiectului obiect_derivat, şi metodele
//aduna() şi scade() din clasa de baza pastrand mostenirea de tip private.
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include <stdarg.h> 
using namespace std;
#include <stdarg.h>     /* va_list, va_start, va_arg, va_end */
class Baza {
protected: int a, b;
public:
	Baza() { a = 1, b = 1; }
	void setA(int a1) {
		a = a1;
	}
	void setB(int b1) {
		b = b1;
	}
	int getA() {
		return a;
	}
	int getB() {
		return b;
	}
	int aduna() {
		return a + b;
	}
	int scade() {
		return a - b;
	}
};
class Derivata : public Baza
{
	int a, b;
public:
	int inmulteste() {
		return a * b;
	}
};
int main()
{
	Baza obiect_baza;
	cout << "\nAfis din baza (val. initiale): " << obiect_baza.getA() << " " <<
		obiect_baza.getB() << '\n';
	cout << "\nSuma este (cu val. initiale, baza) = " << obiect_baza.aduna();
		cout << "\nDiferenta este (cu val. initiale, baza) = " << obiect_baza.scade();
		Derivata obiect_derivat;
		int n;
		cin >> n;
		obiect_derivat.setA(n);
		cin >> n;
		obiect_derivat.setB(n);
	cout << "\nAfis din baza (modificat): " << obiect_derivat.getA() << " " << obiect_derivat.getB() << '\n';
	cout << "\nSuma/Diferenta dupa setare= " << obiect_derivat.aduna() << "/" <<obiect_derivat.scade() << '\n';
	cout << "\nProdusul este (din derivat cu val. initiale) = " << obiect_derivat.inmulteste() << '\n';
}